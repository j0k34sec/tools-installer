#!/bin/bash

# Define log file and colors
LOG_FILE="$HOME/Tools/linux_install_errors.log"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
WHITE="\e[37m"
BOLD="\e[1m"
RESET="\e[0m"

# Function to print a fancy banner
print_linux_banner() {
    clear
    echo -e "${BOLD}${CYAN}"
    echo ' ╔═══════════════════════════════════════════════════════╗'
    echo ' ║                                                       ║'
    echo ' ║              . --.                                    ║'
    echo ' ║             | o_o |                                   ║'
    echo ' ║              |:_/ |                                   ║'
    echo ' ║             //   \ \                                  ║'
    echo ' ║            (|     | )                                 ║'
    echo ' ║           /\\_   _/\\                                 ║'
    echo ' ║           \___)=(___/                                 ║'
    echo ' ║                                                       ║'
    echo ' ║           Linux Tools Installer v2.0                  ║'
    echo ' ║                                                       ║'
    echo ' ╚═══════════════════════════════════════════════════════╝'
    echo -e "${RESET}\n"
    echo -e "${BOLD}${YELLOW}      Your Ultimate Security Tools Installer${RESET}\n"
    echo -e "${CYAN}===================================================${RESET}\n"
    sleep 1
}

# Function for spinner animation
spinner() {
    local pid=$1
    local message=$2
    local spin='-\|/'
    local i=0
    
    echo -ne "${YELLOW}${message}... ${RESET}"
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) % 4 ))
        printf "\r${YELLOW}${message}... ${BOLD}${spin:$i:1}${RESET}"
        sleep 0.1
    done
    
    printf "\r${GREEN}${message}... Done!${RESET}\n"
}

# Function to show progress bar
show_progress() {
    local duration=$1
    local message=$2
    local elapsed=0
    local progress=0
    local bar_length=40
    local filled=0
    local empty=0
    
    echo -e "${YELLOW}${message}${RESET}"
    
    while [ $elapsed -lt $duration ]; do
        progress=$(( elapsed * 100 / duration ))
        filled=$(( progress * bar_length / 100 ))
        empty=$(( bar_length - filled ))
        
        printf "\r[${CYAN}"
        for ((i=0; i<filled; i++)); do printf "#"; done
        printf "${RESET}"
        for ((i=0; i<empty; i++)); do printf " "; done
        printf "${RESET}] ${progress}%%"
        
        sleep 0.1
        elapsed=$((elapsed + 1))
    done
    
    printf "\r[${GREEN}"
    for ((i=0; i<bar_length; i++)); do printf "#"; done
    printf "${RESET}] 100%%\n"
}

# Function to display a section header
display_section() {
    local title=$1
    echo -e "\n${BOLD}${BLUE}==== ${title} ====${RESET}\n"
}

# Function to log messages with enhanced visuals
log_message() {
    local message=$1
    local type=${2:-"info"}
    
    case $type in
        "success")
            echo -e "${GREEN}[✓] ${message}${RESET}"
            ;;
        "error")
            echo -e "${RED}[✗] ${message}${RESET}"
            echo "[ERROR] $(date): ${message}" >> "$LOG_FILE"
            ;;
        "warning")
            echo -e "${YELLOW}[!] ${message}${RESET}"
            ;;
        "info")
            echo -e "${BLUE}[i] ${message}${RESET}"
            ;;
        "step")
            echo -e "${MAGENTA}[→] ${message}${RESET}"
            ;;
        *)
            echo -e "${WHITE}${message}${RESET}"
            ;;
    esac
}

# Function to check if command exists
check_command() {
    local cmd=$1
    if command -v "$cmd" &>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Function to run command with error handling and animation
run_command() {
    local cmd=$1
    local error_msg=${2:-"Command failed"}
    local success_msg=${3:-"Command completed successfully"}
    
    {
        eval "$cmd"
        cmd_status=$?
    } & spinner $! "Running command"
    
    if [ $cmd_status -eq 0 ]; then
        log_message "$success_msg" "success"
        return 0
    else
        log_message "$error_msg" "error"
        return 1
    fi
}

Tool_for_ubuntu() {
    print_linux_banner
    display_section "INSTALLING LINUX TOOLS"
    #feroxbuster
    if ! command -v feroxbuster &>/dev/null; then
        echo -e "\e[31mferoxbuster is not installed. Installing feroxbuster...\e[0m"
        wget https://github.com/epi052/feroxbuster/releases/download/v2.10.4/x86_64-linux-feroxbuster.tar.gz
        tar -xf x86_64-linux-feroxbuster.tar.gz
        chmod +x feroxbuster
        sudo mv feroxbuster /bin
        rm -rf feroxbuster x86_64-linux-feroxbuster.tar.gz
    else
        echo -e "\e[32mferoxbuster is already installed...\e[0m"
    fi

    #XSSstrike
    xsstrike_DIR="$HOME/Tools/XSStrike"
    if [ -d "$xsstrike_DIR" ]; then
        echo -e "\e[32mXsstrike is already installed path is ~/Tools/XSStrike.\e[0m"
    else
        echo -e "\e[31mXSStrike not installed. Now installing XSStrike....\e[0m"
        git clone https://github.com/s0md3v/XSStrike.git ~/Tools/XSStrike
        pip3 install -r ~/Tools/XSStrike/requirements.txt
        chmod +x ~/Tools/XSStrike/xsstrike.py
        echo -e "\e[31mXSStrike is now installed in ~/Tools\e[0m"
    fi

    #sqlmap
    sqlmap_DIR="$HOME/Tools/sqlmap"
    if [ -d "$sqlmap_DIR" ]; then
        echo -e "\e[32msqlmap is already installed path is ~/Tools/sqlmap\e[0m"
    else
        echo -e "\e[31mnow installing sqlmap....\e[0m"
        git clone https://github.com/sqlmapproject/sqlmap.git ~/Tools/sqlmap
    fi

    #ghauri
    if ! command -v ghauri &>/dev/null; then
        echo -e "\e[31mghauri is not installed. Now installing ghauri....\e[0m"
        git clone https://github.com/r0oth3x49/ghauri.git ~/Tools/ghauri
        pip3 install -r ~/Tools/ghauri/requirements.txt
        python3 ~/Tools/ghauri/setup.py build
        sudo python3 ~/Tools/ghauri/setup.py install
    else
        echo -e "\e[32mghauri is already installed\e[0m"
    fi

    #checking if waymore installed or not
    if ! command -v waymore -h &>/dev/null; then
        echo -e "\e[31mwaymore is not installed. Now installing waymore...\e[0m"
        git clone https://github.com/xnl-h4ck3r/waymore.git ~/Tools/waymore
        pip3 install -r ~/Tools/waymore/requirements.txt
        python3 ~/Tools/waymore/setup.py build
        sudo python3 ~/Tools/waymore/setup.py install
    else
        echo -e "\e[32mwaymore is already installed\e[0m"
    fi

    # Check if paramspider is installed or not
    if ! command -v paramspider &>/dev/null; then
        log_message "paramspider is not installed. Now installing paramspider..." "step"
        
        # Clone the repository
        run_command "git clone https://github.com/devanshbatham/ParamSpider.git ~/Tools/ParamSpider" \
            "Failed to clone ParamSpider repository" \
            "ParamSpider repository cloned successfully"
        
        # Create virtual environment
        run_command "python3 -m venv ~/Tools/ParamSpider/venv" \
            "Failed to create virtual environment for ParamSpider" \
            "Created virtual environment for ParamSpider"
        
        # Install dependencies
        run_command "source ~/Tools/ParamSpider/venv/bin/activate && pip install -r ~/Tools/ParamSpider/requirements.txt && deactivate" \
            "Failed to install ParamSpider dependencies" \
            "Installed ParamSpider dependencies"
        
        # Create wrapper script for paramspider
        log_message "Creating paramspider wrapper script..." "info"
        cat > ~/Tools/ParamSpider/paramspider_wrapper.sh << 'EOF'
#!/bin/bash
source ~/Tools/ParamSpider/venv/bin/activate
~/Tools/ParamSpider/venv/bin/python ~/Tools/ParamSpider/paramspider/main.py "$@"
deactivate
EOF
        chmod +x ~/Tools/ParamSpider/paramspider_wrapper.sh
        
        # Create a symlink to the wrapper script
        run_command "sudo ln -sf ~/Tools/ParamSpider/paramspider_wrapper.sh /usr/local/bin/paramspider" \
            "Failed to create symlink for paramspider" \
            "Created symlink for paramspider"
            
        log_message "paramspider has been installed successfully" "success"
    else
        log_message "paramspider is already installed" "success"
        
        # Fix existing paramspider installation if the wrapper is incorrect
        if [ -f ~/Tools/ParamSpider/paramspider_wrapper.sh ]; then
            log_message "Checking and fixing paramspider wrapper script..." "info"
            if grep -q "paramspider\.py" ~/Tools/ParamSpider/paramspider_wrapper.sh; then
                log_message "Fixing incorrect paramspider wrapper script..." "warning"
                cat > ~/Tools/ParamSpider/paramspider_wrapper.sh << 'EOF'
#!/bin/bash
source ~/Tools/ParamSpider/venv/bin/activate
~/Tools/ParamSpider/venv/bin/python ~/Tools/ParamSpider/paramspider/main.py "$@"
deactivate
EOF
                chmod +x ~/Tools/ParamSpider/paramspider_wrapper.sh
                log_message "paramspider wrapper script fixed" "success"
            fi
        fi
    fi

    #checking if creepy crawler installed or not
    creepyCrawler_DIR=$HOME/Tools/creepyCrawler
    if [ -d "$creepyCrawler_DIR" ]; then
        echo -e "\e[32mcreepyCrawler already exist\e[0m"
    else
        echo -e "\e[31mNow installing creepyCrawler...\e[0m"
        git clone https://github.com/chm0dx/creepyCrawler.git ~/Tools/creepyCrawler
        pip3 install -r ~/Tools/creepyCrawler/requirements.txt
        chmod +x ~/Tools/creepyCrawler/creepyCrawler.py
    fi

    #checkig if ffuf installed or not
    if ! command -v ffuf &>/dev/null; then
        echo -e "\e[31mffuf not installed. Now installing ffuf\e[0m"
        sudo apt install ffuf -y
    else
        echo -e "\e[32mffuf already installed...\e[0m"
    fi

    #checking if SSRFmap installed or not
    ssrf_DIR=$HOME/Tools/SSRFmap
    if [ -d "$ssrf_DIR" ]; then
        echo -e "\e[32mSSRFmap already installed...\e[0m"
    else
        echo -e "\e[31mSSRFmap Now installing....\e[0m"
        git clone https://github.com/swisskyrepo/SSRFmap.git ~/Tools/SSRFmap/
        pip install -r ~/Tools/SSRFmap/requirements.txt
        chmod +x ~/Tools/SSRFmap/ssrfmap.py
    fi

    #seclists
    seclist_DIR=/usr/share/seclists
    if [ -d "$seclist_DIR" ]; then
        echo -e "\e[32mseclist is already installed path is /usr/share/seclists\e[0m"
    else
        echo -e "\e[31mNow Installing seclists....\e[0m"
        git clone https://github.com/danielmiessler/SecLists.git ~/Tools/SecLists
        mv ~/Tools/SecLists ~/Tools/seclists
        sudo cp -r ~/Tools/seclists /usr/share
        rm -rf ~/Tools/seclists
    fi

    #metasploit
    if ! command -v msfvenom &>/dev/null; then
        echo -e "\e[31mNow installing Metasploit...\e[0m"
        mkdir -p ~/Tools # Ensure ~/Tools directory exists
        curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb -o ~/Tools/msfinstall
        chmod 755 ~/Tools/msfinstall # Make the installer executable
        ~/Tools/msfinstall           # Run the installer
    else
        echo -e "\e[32mMetasploit is already installed.\e[0m"
    fi

    #checking wpscan
    if ! command -v wpscan &>/dev/null; then
        echo -e "\e[31mNow installing wpscan\e[0m"
        sudo apt install -y ruby gem build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev libgmp-dev zlib1g-dev
        sudo gem install wpscan
    else
        echo -e "\e[32mWpscan is already installed\e[0m"
    fi

    #checking trufflehog
    if ! command -v trufflehog &>/dev/null; then
        echo -e "\e[31mtruffelhog not installed. now installing\e[0m"
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sudo sh -s -- -b /usr/local/bin
    else
        echo -e "\e[32mtrufflehog is already installed\e[0m"
    fi

    # calling go tool for installation
    "$HOME/test/tools-installer/installers/go_tool_installer.sh"
    
    # Create symlinks for tools that aren't in PATH
    create_tool_symlinks
}

# Function to create symlinks for tools that aren't automatically added to PATH
create_tool_symlinks() {
    echo -e "\e[32mCreating symlinks for tools in ~/Tools to make them accessible from anywhere...\e[0m"
    
    # Create symlinks for XSStrike
    if [ -f "$HOME/Tools/XSStrike/xsstrike.py" ]; then
        echo -e "\e[32mCreating symlink for XSStrike...\e[0m"
        sudo ln -sf "$HOME/Tools/XSStrike/xsstrike.py" /usr/local/bin/xsstrike
        sudo chmod +x /usr/local/bin/xsstrike
    fi
    
    # Create symlink for sqlmap if installed in ~/Tools
    if [ -d "$HOME/Tools/sqlmap" ] && [ -f "$HOME/Tools/sqlmap/sqlmap.py" ]; then
        echo -e "\e[32mCreating symlink for sqlmap...\e[0m"
        sudo ln -sf "$HOME/Tools/sqlmap/sqlmap.py" /usr/local/bin/sqlmap-py
        sudo chmod +x /usr/local/bin/sqlmap-py
    fi
    
    # Create symlink for creepyCrawler
    if [ -f "$HOME/Tools/creepyCrawler/creepyCrawler.py" ]; then
        echo -e "\e[32mCreating symlink for creepyCrawler...\e[0m"
        sudo ln -sf "$HOME/Tools/creepyCrawler/creepyCrawler.py" /usr/local/bin/creepycrawler
        sudo chmod +x /usr/local/bin/creepycrawler
    fi
    
    # Create symlink for SSRFmap
    if [ -f "$HOME/Tools/SSRFmap/ssrfmap.py" ]; then
        echo -e "\e[32mCreating symlink for SSRFmap...\e[0m"
        sudo ln -sf "$HOME/Tools/SSRFmap/ssrfmap.py" /usr/local/bin/ssrfmap
        sudo chmod +x /usr/local/bin/ssrfmap
    fi
    
    echo -e "\e[32mAll symlinks created successfully!\e[0m"
}

Tool_for_ubuntu
